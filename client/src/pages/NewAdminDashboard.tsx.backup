import React, { useState, useEffect } from 'react';
import { useAuth } from '../contexts/AuthContext';
import AdminLayout from '../components/AdminLayout';
import AdminUsers from '../components/admin/AdminUsers';
import AdminEvents from '../components/admin/AdminEvents';
import { useDashboardStats } from '../hooks/useDashboardStats';
import styled from 'styled-components';
import { motion } from 'framer-motion';
import {
  Chart as ChartJS,
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  BarElement,
  ArcElement,
  Title,
  Tooltip,
  Legend,
  Filler
} from 'chart.js';
import { Line, Bar, Doughnut } from 'react-chartjs-2';
import api from '../services/api';

// Registrar componentes do Chart.js
ChartJS.register(
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  BarElement,
  ArcElement,
  Title,
  Tooltip,
  Legend,
  Filler
);

// Interfaces para dados dos gráficos
interface UserGrowthData {
  month: string;
  users: number;
  new_users: number;
}

interface EventPerformanceData {
  categories: Array<{
    name: string;
    total_events: number;
    avg_participants: number;
    revenue: number;
    satisfaction: number;
  }>;
  monthly_revenue: Array<{
    month: string;
    revenue: number;
  }>;
}

interface RegistrationAnalysisData {
  status_distribution: Array<{
    status: string;
    count: number;
    percentage: number;
  }>;
  conversion_rates: Array<{
    month: string;
    applications: number;
    approved: number;
    rate: number;
  }>;
  peak_hours: Array<{
    hour: string;
    registrations: number;
  }>;
}

interface FinancialData {
  monthly_revenue: Array<{
    month: string;
    revenue: number;
    expenses: number;
    profit: number;
  }>;
  revenue_sources: Array<{
    source: string;
    amount: number;
    percentage: number;
  }>;
  expense_categories: Array<{
    category: string;
    amount: number;
    percentage: number;
  }>;
}

const DashboardContainer = styled.div`
  display: grid;
  gap: 2rem;
  padding: 1rem;
`;

const HeaderSection = styled.div`
  display: flex;
  justify-content: between;
  align-items: center;
  margin-bottom: 2rem;
`;

const DashboardTitle = styled.h1`
  font-size: 2rem;
  font-weight: 700;
  color: #2d3748;
  margin: 0;
`;

const TabsContainer = styled.div`
  display: flex;
  gap: 1rem;
  margin-bottom: 2rem;
  border-bottom: 2px solid #e2e8f0;
`;

const Tab = styled.button<{ active: boolean }>`
  padding: 0.75rem 1.5rem;
  border: none;
  background: ${props => props.active ? '#007bff' : 'transparent'};
  color: ${props => props.active ? 'white' : '#64748b'};
  border-radius: 8px 8px 0 0;
  font-weight: 600;
  cursor: pointer;
  transition: all 0.2s ease;
  
  &:hover {
    background: ${props => props.active ? '#0056b3' : '#f1f5f9'};
  }
`;

const StatsGrid = styled.div`
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
  gap: 1.5rem;
  margin-bottom: 2rem;
`;

const StatCard = styled(motion.div)`
  background: white;
  padding: 2rem;
  border-radius: 1rem;
  border-left: 4px solid;
  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
  text-align: center;
`;

const StatNumber = styled.div`
  font-size: 2.5rem;
  font-weight: 700;
  margin-bottom: 0.5rem;
`;

const StatLabel = styled.div`
  color: #6c757d;
  font-weight: 600;
  text-transform: uppercase;
  letter-spacing: 1px;
  font-size: 0.875rem;
`;

const ChartsGrid = styled.div`
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(400px, 1fr));
  gap: 2rem;
`;

const ChartCard = styled(motion.div)`
  background: white;
  padding: 1.5rem;
  border-radius: 1rem;
  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
  
  h3 {
    margin: 0 0 1.5rem 0;
    color: #2d3748;
    font-size: 1.25rem;
    font-weight: 600;
  }
`;

const ChartContainer = styled.div`
  position: relative;
  height: 300px;
  width: 100%;
`;

const LoadingContainer = styled.div`
  display: flex;
  justify-content: center;
  align-items: center;
  height: 200px;
  color: #64748b;
`;

const ErrorContainer = styled.div`
  display: flex;
  justify-content: center;
  align-items: center;
  height: 200px;
  color: #ef4444;
  background: #fef2f2;
  border-radius: 8px;
  border: 1px solid #fecaca;
`;

const ActionCard = styled(motion.div)`
  background: white;
  border-radius: 1rem;
  padding: 2rem;
  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
`;

const ActionTitle = styled.h3`
  color: #343a40;
  margin-bottom: 1.5rem;
  font-size: 1.25rem;
  font-weight: 600;
`;

const ActionButton = styled.button`
  background: linear-gradient(135deg, #007bff 0%, #0056b3 100%);
  color: white;
  border: none;
  padding: 0.75rem 1.5rem;
  border-radius: 0.5rem;
  font-weight: 600;
  cursor: pointer;
  transition: all 0.3s ease;
  width: 100%;
  margin-bottom: 0.75rem;
  font-size: 0.875rem;

  &:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 15px rgba(0, 123, 255, 0.3);
  }

  &:last-child {
    margin-bottom: 0;
  }
`;

const WelcomeCard = styled(motion.div)`
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  color: white;
  padding: 2rem;
  border-radius: 1rem;
  margin-bottom: 2rem;
  text-align: center;
`;

const WelcomeTitle = styled.h1`
  font-size: 2rem;
  font-weight: 700;
  margin-bottom: 0.5rem;
`;

const WelcomeSubtitle = styled.p`
  font-size: 1.1rem;
  opacity: 0.9;
  margin: 0;
`;

const AdminDashboard: React.FC = () => {
  const { user } = useAuth();
  const { stats, loading } = useDashboardStats();
  const [activeSection, setActiveSection] = useState('dashboard');
  const [activeTab, setActiveTab] = useState('overview');
  
  // Estados para dados dos gráficos
  const [userGrowthData, setUserGrowthData] = useState<UserGrowthData[]>([]);
  const [eventPerformanceData, setEventPerformanceData] = useState<EventPerformanceData | null>(null);
  const [registrationAnalysisData, setRegistrationAnalysisData] = useState<RegistrationAnalysisData | null>(null);
  const [financialData, setFinancialData] = useState<FinancialData | null>(null);
  const [chartsLoading, setChartsLoading] = useState(true);

  // Carregar dados dos gráficos
  useEffect(() => {
    const loadChartData = async () => {
      try {
        setChartsLoading(true);
        
        const [usersRes, eventsRes, registrationsRes, financialRes] = await Promise.all([
          api.get('/dashboard/charts/users-growth'),
          api.get('/dashboard/charts/events-performance'),
          api.get('/dashboard/charts/registrations-analysis'),
          api.get('/dashboard/charts/financial-overview')
        ]);

        setUserGrowthData(usersRes.data.data);
        setEventPerformanceData(eventsRes.data.data);
        setRegistrationAnalysisData(registrationsRes.data.data);
        setFinancialData(financialRes.data.data);
      } catch (error) {
        console.error('Erro ao carregar dados dos gráficos:', error);
      } finally {
        setChartsLoading(false);
      }
    };

    if (activeTab === 'charts') {
      loadChartData();
    }
  }, [activeTab]);

  // Configurações dos gráficos
  const getUserGrowthChartData = () => ({
    labels: userGrowthData.map(item => item.month),
    datasets: [
      {
        label: 'Total de Usuários',
        data: userGrowthData.map(item => item.users),
        borderColor: '#007bff',
        backgroundColor: 'rgba(0, 123, 255, 0.1)',
        fill: true,
        tension: 0.4
      },
      {
        label: 'Novos Usuários',
        data: userGrowthData.map(item => item.new_users),
        borderColor: '#28a745',
        backgroundColor: 'rgba(40, 167, 69, 0.1)',
        fill: true,
        tension: 0.4
      }
    ]
  });

  const getRegistrationStatusChartData = () => {
    if (!registrationAnalysisData) return { labels: [], datasets: [] };
    
    return {
      labels: registrationAnalysisData.status_distribution.map(item => {
        switch(item.status) {
          case 'approved': return 'Aprovadas';
          case 'pending': return 'Pendentes';
          case 'rejected': return 'Rejeitadas';
          case 'cancelled': return 'Canceladas';
          default: return item.status;
        }
      }),
      datasets: [
        {
          data: registrationAnalysisData.status_distribution.map(item => item.count),
          backgroundColor: ['#28a745', '#ffc107', '#dc3545', '#6c757d'],
          borderWidth: 2,
          borderColor: '#fff'
        }
      ]
    };
  };

  const getRevenueChartData = () => {
    if (!financialData) return { labels: [], datasets: [] };
    
    return {
      labels: financialData.monthly_revenue.map(item => item.month),
      datasets: [
        {
          label: 'Receita',
          data: financialData.monthly_revenue.map(item => item.revenue),
          backgroundColor: 'rgba(0, 123, 255, 0.8)',
          borderColor: '#007bff',
          borderWidth: 1
        },
        {
          label: 'Despesas',
          data: financialData.monthly_revenue.map(item => item.expenses),
          backgroundColor: 'rgba(220, 53, 69, 0.8)',
          borderColor: '#dc3545',
          borderWidth: 1
        },
        {
          label: 'Lucro',
          data: financialData.monthly_revenue.map(item => item.profit),
          backgroundColor: 'rgba(40, 167, 69, 0.8)',
          borderColor: '#28a745',
          borderWidth: 1
        }
      ]
    };
  };

  const getSectionTitle = () => {
    switch (activeSection) {
      case 'users':
        return 'Gerenciamento de Usuários';
      case 'events':
        return 'Eventos e Aulas';
      case 'products':
        return 'Loja e Produtos';
      case 'gallery':
        return 'Galeria de Fotos';
      case 'reports':
        return 'Relatórios e Analytics';
      case 'settings':
        return 'Configurações do Sistema';
      default:
        return 'Dashboard Administrativo';
    }
  };

  const getSectionSubtitle = () => {
    switch (activeSection) {
      case 'users':
        return 'Gerencie todos os usuários da plataforma';
      case 'events':
        return 'Controle eventos, aulas e inscrições';
      case 'products':
        return 'Administre produtos e estoque da loja';
      case 'gallery':
        return 'Organize fotos e mídia do site';
      case 'reports':
        return 'Visualize métricas e relatórios detalhados';
      case 'settings':
        return 'Configure informações da academia e sistema';
      default:
        return 'Painel de controle da Academia Capoeira Nacional';
    }
  };

  const renderContent = () => {
    switch (activeSection) {
      case 'users':
        return <AdminUsers />;
      case 'events':
        return <AdminEvents />;
      case 'products':
        return <div>Componente de Produtos em desenvolvimento...</div>;
      case 'gallery':
        return <div>Componente de Galeria em desenvolvimento...</div>;
      case 'reports':
        return <div>Componente de Relatórios em desenvolvimento...</div>;
      case 'settings':
        return <div>Componente de Configurações em desenvolvimento...</div>;
      default:
        return (
          <DashboardContainer>
            {/* Header com título e tabs */}
            <HeaderSection>
              <DashboardTitle>Dashboard Administrativo</DashboardTitle>
            </HeaderSection>

            <TabsContainer>
              <Tab 
                active={activeTab === 'overview'} 
                onClick={() => setActiveTab('overview')}
              >
                📊 Visão Geral
              </Tab>
              <Tab 
                active={activeTab === 'charts'} 
                onClick={() => setActiveTab('charts')}
              >
                📈 Gráficos Avançados
              </Tab>
            </TabsContainer>

            {activeTab === 'overview' && (
              <>
                <WelcomeCard
                  initial={{ opacity: 0, y: 30 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ duration: 0.6 }}
                >
                  <WelcomeTitle>Bem-vindo, {user?.name}!</WelcomeTitle>
                  <WelcomeSubtitle>
                    Gerencie toda a Academia Capoeira Nacional em um só lugar
                  </WelcomeSubtitle>
                </WelcomeCard>

            <StatsGrid>
              <StatCard
                style={{ borderLeftColor: '#007bff' }}
                initial={{ opacity: 0, x: -30 }}
                animate={{ opacity: 1, x: 0 }}
                transition={{ duration: 0.6, delay: 0.1 }}
              >
                <StatNumber style={{ color: '#007bff' }}>
                  {loading ? '...' : stats.totalUsers}
                </StatNumber>
                <StatLabel>Total de Usuários</StatLabel>
              </StatCard>

              <StatCard
                style={{ borderLeftColor: '#28a745' }}
                initial={{ opacity: 0, x: -30 }}
                animate={{ opacity: 1, x: 0 }}
                transition={{ duration: 0.6, delay: 0.2 }}
              >
                <StatNumber style={{ color: '#28a745' }}>
                  {loading ? '...' : stats.activeEvents}
                </StatNumber>
                <StatLabel>Eventos Ativos</StatLabel>
              </StatCard>

              <StatCard
                style={{ borderLeftColor: '#ffc107' }}
                initial={{ opacity: 0, x: -30 }}
                animate={{ opacity: 1, x: 0 }}
                transition={{ duration: 0.6, delay: 0.3 }}
              >
                <StatNumber style={{ color: '#ffc107' }}>
                  {loading ? '...' : stats.totalProducts}
                </StatNumber>
                <StatLabel>Produtos na Loja</StatLabel>
              </StatCard>

              <StatCard
                style={{ borderLeftColor: '#dc3545' }}
                initial={{ opacity: 0, x: -30 }}
                animate={{ opacity: 1, x: 0 }}
                transition={{ duration: 0.6, delay: 0.4 }}
              >
                <StatNumber style={{ color: '#dc3545' }}>
                  {loading ? '...' : stats.totalPhotos}
                </StatNumber>
                <StatLabel>Fotos na Galeria</StatLabel>
              </StatCard>
            </StatsGrid>

            <QuickActions>
              <ActionCard
                initial={{ opacity: 0, y: 30 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.6, delay: 0.5 }}
              >
                <ActionTitle>👥 Gerenciamento de Usuários</ActionTitle>
                <ActionButton onClick={() => setActiveSection('users')}>
                  Ver Todos os Usuários
                </ActionButton>
                <ActionButton onClick={() => setActiveSection('users')}>
                  Relatório de Atividade
                </ActionButton>
              </ActionCard>

              <ActionCard
                initial={{ opacity: 0, y: 30 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.6, delay: 0.6 }}
              >
                <ActionTitle>📅 Eventos e Aulas</ActionTitle>
                <ActionButton onClick={() => setActiveSection('events')}>
                  Gerenciar Eventos
                </ActionButton>
                <ActionButton onClick={() => setActiveSection('events')}>
                  Controlar Inscrições
                </ActionButton>
              </ActionCard>

              <ActionCard
                initial={{ opacity: 0, y: 30 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.6, delay: 0.7 }}
              >
                <ActionTitle>🛍️ Loja Online</ActionTitle>
                <ActionButton onClick={() => setActiveSection('products')}>
                  Gerenciar Produtos
                </ActionButton>
                <ActionButton onClick={() => setActiveSection('products')}>
                  Controle de Estoque
                </ActionButton>
              </ActionCard>

              <ActionCard
                initial={{ opacity: 0, y: 30 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.6, delay: 0.8 }}
              >
                <ActionTitle>📈 Relatórios</ActionTitle>
                <ActionButton onClick={() => setActiveSection('reports')}>
                  Visualizar Métricas
                </ActionButton>
                <ActionButton onClick={() => setActiveSection('reports')}>
                  Análise de Dados
                </ActionButton>
              </ActionCard>
            </QuickActions>
          </DashboardContainer>
        );
    }
  };

  return (
    <AdminLayout
      activeSection={activeSection}
      onSectionChange={setActiveSection}
      title={getSectionTitle()}
      subtitle={getSectionSubtitle()}
    >
      {renderContent()}
    </AdminLayout>
  );
};

export default AdminDashboard;