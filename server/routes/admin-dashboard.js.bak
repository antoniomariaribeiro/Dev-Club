const express = require('express');
const router = express.Router();
const { Op } = require('sequelize');
const { User, Event, EventRegistration, Product, Gallery, Contact } = require('../models');
const { authMiddleware, adminMiddleware } = require('../middleware/auth');

// Middleware para garantir que todas as rotas s√£o protegidas e apenas para admins
router.use(authMiddleware);
router.use(adminMiddleware);

// @route   GET /api/admin/dashboard/stats
// @desc    Obter estat√≠sticas gerais do dashboard
// @access  Admin
router.get('/stats', async (req, res) => {
  try {
    // Calcular estat√≠sticas em paralelo
    const [
      totalUsers,
      totalEvents,
      totalProducts,
      totalContacts,
      newUsersThisMonth,
      activeEvents,
      totalRevenue,
      monthlyRevenue
    ] = await Promise.all([
      User.count({ where: { role: { [Op.ne]: 'admin' } } }),
      Event.count(),
      Product.count(),
      Contact.count(),
      User.count({
        where: {
          role: { [Op.ne]: 'admin' },
          created_at: {
            [Op.gte]: new Date(new Date().getFullYear(), new Date().getMonth(), 1)
          }
        }
      }),
      Event.count({ where: { status: 'active' } }),
      EventRegistration.sum('amount_paid') || 0,
      EventRegistration.sum('amount_paid', {
        where: {
          created_at: {
            [Op.gte]: new Date(new Date().getFullYear(), new Date().getMonth(), 1)
          }
        }
      }) || 0
    ]);

    const stats = {
      totalUsers,
      totalEvents,
      totalProducts,
      totalContacts,
      totalRevenue,
      monthlyRevenue,
      newUsersThisMonth,
      activeEvents
    };

    res.json(stats);
  } catch (error) {
    console.error('Erro ao buscar estat√≠sticas do dashboard:', error);
    res.status(500).json({ message: 'Erro interno do servidor' });
  }
});

// @route   GET /api/admin/dashboard/charts/:type
// @desc    Obter dados para gr√°ficos espec√≠ficos
// @access  Admin
router.get('/charts/:type', async (req, res) => {
  try {
    const { type } = req.params;
    const { period = '30d' } = req.query;

    let startDate;
    switch (period) {
      case '7d':
        startDate = new Date(Date.now() - 7 * 24 * 60 * 60 * 1000);
        break;
      case '30d':
        startDate = new Date(Date.now() - 30 * 24 * 60 * 60 * 1000);
        break;
      case '90d':
        startDate = new Date(Date.now() - 90 * 24 * 60 * 60 * 1000);
        break;
      case '1y':
        startDate = new Date(Date.now() - 365 * 24 * 60 * 60 * 1000);
        break;
      default:
        startDate = new Date(Date.now() - 30 * 24 * 60 * 60 * 1000);
    }

    let chartData = {};

    switch (type) {
      case 'users':
        // Crescimento de usu√°rios por m√™s
        const userGrowth = await User.findAll({
          attributes: [
            [User.sequelize.fn('DATE_TRUNC', 'month', User.sequelize.col('created_at')), 'month'],
            [User.sequelize.fn('COUNT', '*'), 'count']
          ],
          where: {
            created_at: { [Op.gte]: startDate },
            role: { [Op.ne]: 'admin' }
          },
          group: [User.sequelize.fn('DATE_TRUNC', 'month', User.sequelize.col('created_at'))],
          order: [[User.sequelize.fn('DATE_TRUNC', 'month', User.sequelize.col('created_at')), 'ASC']]
        });

        chartData = {
          labels: userGrowth.map(item => new Date(item.dataValues.month).toLocaleDateString('pt-BR', { month: 'short', year: 'numeric' })),
          datasets: [{
            label: 'Novos Usu√°rios',
            data: userGrowth.map(item => item.dataValues.count),
            borderColor: '#007bff',
            backgroundColor: 'rgba(0, 123, 255, 0.1)',
            fill: true
          }]
        };
        break;

      case 'events':
        // Performance de eventos
        const eventStats = await Event.findAll({
          include: [{
            model: EventRegistration,
            attributes: ['payment_status', 'amount_paid'],
            required: false
          }],
          where: {
            created_at: { [Op.gte]: startDate }
          }
        });

        const eventsByMonth = {};
        eventStats.forEach(event => {
          const month = new Date(event.created_at).toLocaleDateString('pt-BR', { month: 'short', year: 'numeric' });
          if (!eventsByMonth[month]) {
            eventsByMonth[month] = {
              total: 0,
              revenue: 0,
              registrations: 0
            };
          }
          eventsByMonth[month].total += 1;
          if (event.EventRegistrations) {
            event.EventRegistrations.forEach(reg => {
              if (reg.payment_status === 'paid') {
                eventsByMonth[month].revenue += parseFloat(reg.amount_paid || 0);
              }
              eventsByMonth[month].registrations += 1;
            });
          }
        });

        chartData = {
          labels: Object.keys(eventsByMonth),
          datasets: [
            {
              label: 'Eventos Criados',
              data: Object.values(eventsByMonth).map(item => item.total),
              backgroundColor: '#28a745',
              borderColor: '#28a745'
            },
            {
              label: 'Inscri√ß√µes',
              data: Object.values(eventsByMonth).map(item => item.registrations),
              backgroundColor: '#ffc107',
              borderColor: '#ffc107'
            }
          ]
        };
        break;

      case 'revenue':
        // Receita por m√™s
        const revenueData = await EventRegistration.findAll({
          attributes: [
            [EventRegistration.sequelize.fn('DATE_TRUNC', 'month', EventRegistration.sequelize.col('created_at')), 'month'],
            [EventRegistration.sequelize.fn('SUM', EventRegistration.sequelize.col('amount_paid')), 'total']
          ],
          where: {
            created_at: { [Op.gte]: startDate },
            payment_status: 'paid'
          },
          group: [EventRegistration.sequelize.fn('DATE_TRUNC', 'month', EventRegistration.sequelize.col('created_at'))],
          order: [[EventRegistration.sequelize.fn('DATE_TRUNC', 'month', EventRegistration.sequelize.col('created_at')), 'ASC']]
        });

        chartData = {
          labels: revenueData.map(item => new Date(item.dataValues.month).toLocaleDateString('pt-BR', { month: 'short', year: 'numeric' })),
          datasets: [{
            label: 'Receita (R$)',
            data: revenueData.map(item => parseFloat(item.dataValues.total || 0)),
            borderColor: '#dc3545',
            backgroundColor: 'rgba(220, 53, 69, 0.1)',
            fill: true
          }]
        };
        break;

      default:
        return res.status(400).json({ message: 'Tipo de gr√°fico inv√°lido' });
    }

    res.json({ data: chartData });
  } catch (error) {
    console.error('Erro ao buscar dados do gr√°fico:', error);
    res.status(500).json({ message: 'Erro interno do servidor' });
  }
});

// @route   GET /api/admin/dashboard/recent-activities
// @desc    Obter atividades recentes do sistema
// @access  Admin
router.get('/recent-activities', async (req, res) => {
  try {
    const limit = parseInt(req.query.limit) || 10;

    // Buscar atividades recentes de diferentes tipos
    const [recentUsers, recentEvents, recentRegistrations, recentContacts] = await Promise.all([
      User.findAll({
        where: { role: { [Op.ne]: 'admin' } },
        order: [['created_at', 'DESC']],
        limit: Math.ceil(limit / 4),
        attributes: ['id', 'name', 'email', 'created_at']
      }),
      Event.findAll({
        order: [['created_at', 'DESC']],
        limit: Math.ceil(limit / 4),
        attributes: ['id', 'title', 'date', 'created_at']
      }),
      EventRegistration.findAll({
        include: [
          { model: User, attributes: ['name'] },
          { model: Event, attributes: ['title'] }
        ],
        order: [['created_at', 'DESC']],
        limit: Math.ceil(limit / 4),
        attributes: ['id', 'status', 'created_at']
      }),
      Contact.findAll({
        order: [['created_at', 'DESC']],
        limit: Math.ceil(limit / 4),
        attributes: ['id', 'name', 'email', 'status', 'created_at']
      })
    ]);

    // Combinar e formatar as atividades
    const activities = [
      ...recentUsers.map(user => ({
        id: `user-${user.id}`,
        type: 'user',
        title: 'Novo usu√°rio cadastrado',
        description: `${user.name} se cadastrou na plataforma`,
        timestamp: user.created_at,
        icon: 'üë§'
      })),
      ...recentEvents.map(event => ({
        id: `event-${event.id}`,
        type: 'event',
        title: 'Novo evento criado',
        description: `Evento "${event.title}" foi criado`,
        timestamp: event.created_at,
        icon: 'üìÖ'
      })),
      ...recentRegistrations.map(reg => ({
        id: `registration-${reg.id}`,
        type: 'registration',
        title: 'Nova inscri√ß√£o',
        description: `${reg.User?.name} se inscreveu em "${reg.Event?.title}"`,
        timestamp: reg.created_at,
        icon: '‚úÖ'
      })),
      ...recentContacts.map(contact => ({
        id: `contact-${contact.id}`,
        type: 'contact',
        title: 'Novo contato',
        description: `${contact.name} enviou uma mensagem`,
        timestamp: contact.created_at,
        icon: 'üí¨'
      }))
    ];

    // Ordenar por timestamp e limitar
    activities.sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));
    const limitedActivities = activities.slice(0, limit);

    res.json({ activities: limitedActivities });
  } catch (error) {
    console.error('Erro ao buscar atividades recentes:', error);
    res.status(500).json({ message: 'Erro interno do servidor' });
  }
});

// @route   GET /api/admin/dashboard/realtime-stats
// @desc    Obter estat√≠sticas em tempo real
// @access  Admin
router.get('/realtime-stats', async (req, res) => {
  try {
    // Usu√°rios online simulado (em produ√ß√£o voc√™ usaria Redis ou WebSockets)
    const onlineUsers = Math.floor(Math.random() * 50) + 10;
    
    // Visitas hoje
    const today = new Date();
    today.setHours(0, 0, 0, 0);
    const todayVisits = await User.count({
      where: {
        created_at: { [Op.gte]: today }
      }
    });

    // Taxa de convers√£o simulada
    const totalUsers = await User.count({ where: { role: { [Op.ne]: 'admin' } } });
    const totalSales = await EventRegistration.count({ where: { payment_status: 'paid' } });
    const conversionRate = totalUsers > 0 ? ((totalSales / totalUsers) * 100).toFixed(1) : 0;

    // Tempo m√©dio de sess√£o (simulado)
    const averageSessionTime = Math.floor(Math.random() * 600) + 300; // 5-15 min

    res.json({
      onlineUsers,
      todayVisits,
      conversionRate: parseFloat(conversionRate),
      averageSessionTime
    });

  } catch (error) {
    console.error('Erro ao obter estat√≠sticas em tempo real:', error);
    res.status(500).json({ message: 'Erro interno do servidor' });
  }
});

// @route   GET /api/admin/dashboard/activity
// @desc    Obter feed de atividades em tempo real
// @access  Admin
router.get('/activity', async (req, res) => {
  try {
    const activities = [];

    // √öltimos usu√°rios criados
    const recentUsers = await User.findAll({
      limit: 3,
      order: [['created_at', 'DESC']],
      where: { role: { [Op.ne]: 'admin' } },
      attributes: ['name', 'created_at']
    });

    recentUsers.forEach((user, index) => {
      const timeAgo = getTimeAgo(user.created_at);
      activities.push({
        id: `user-${index}-${Date.now()}`,
        type: 'user',
        message: `${user.name} se cadastrou na plataforma`,
        time: timeAgo,
        user: user.name
      });
    });

    // √öltimos eventos criados
    const recentEvents = await Event.findAll({
      limit: 2,
      order: [['created_at', 'DESC']],
      attributes: ['title', 'created_at']
    });

    recentEvents.forEach((event, index) => {
      const timeAgo = getTimeAgo(event.created_at);
      activities.push({
        id: `event-${index}-${Date.now()}`,
        type: 'event',
        message: `Evento "${event.title}" foi criado`,
        time: timeAgo
      });
    });

    // √öltimas inscri√ß√µes
    const recentRegistrations = await EventRegistration.findAll({
      limit: 2,
      order: [['created_at', 'DESC']],
      include: [
        { model: User, as: 'user', attributes: ['name'] },
        { model: Event, as: 'event', attributes: ['title'] }
      ]
    });

    recentRegistrations.forEach((reg, index) => {
      const timeAgo = getTimeAgo(reg.created_at);
      activities.push({
        id: `registration-${index}-${Date.now()}`,
        type: 'sale',
        message: `${reg.user?.name} se inscreveu em "${reg.event?.title}"`,
        time: timeAgo,
        user: reg.user?.name
      });
    });

    // Ordenar por tempo (mais recente primeiro) e limitar
    res.json(activities.slice(0, 10));

  } catch (error) {
    console.error('Erro ao obter atividade em tempo real:', error);
    res.status(500).json({ message: 'Erro interno do servidor' });
  }
});

// @route   GET /api/admin/dashboard/performance
// @desc    M√©tricas de performance do sistema
// @access  Admin
router.get('/performance', async (req, res) => {
  try {
    const metrics = {
      uptime: '98.5%',
      responseTime: Math.floor(Math.random() * 50) + 20 + 'ms',
      activeConnections: Math.floor(Math.random() * 100) + 50,
      cpuUsage: Math.floor(Math.random() * 30) + 20 + '%',
      memoryUsage: Math.floor(Math.random() * 40) + 30 + '%',
      diskUsage: Math.floor(Math.random() * 20) + 40 + '%'
    };

    res.json(metrics);

  } catch (error) {
    console.error('Erro ao obter m√©tricas de performance:', error);
    res.status(500).json({ message: 'Erro interno do servidor' });
  }
});

// Fun√ß√£o auxiliar para calcular tempo decorrido
function getTimeAgo(date) {
  const now = new Date();
  const diffInMs = now - new Date(date);
  const diffInMinutes = Math.floor(diffInMs / (1000 * 60));
  
  if (diffInMinutes < 1) return 'Agora mesmo';
  if (diffInMinutes < 60) return `${diffInMinutes} minuto${diffInMinutes > 1 ? 's' : ''} atr√°s`;
  
  const diffInHours = Math.floor(diffInMinutes / 60);
  if (diffInHours < 24) return `${diffInHours} hora${diffInHours > 1 ? 's' : ''} atr√°s`;
  
  const diffInDays = Math.floor(diffInHours / 24);
  return `${diffInDays} dia${diffInDays > 1 ? 's' : ''} atr√°s`;
}

module.exports = router;