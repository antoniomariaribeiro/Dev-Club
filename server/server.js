/**
 * ========================================
 * ü•ã SISTEMA CAPOEIRA PRO - SERVIDOR PRINCIPAL
 * ========================================
 * 
 * Sistema completo de gest√£o para academia de capoeira
 * - Autentica√ß√£o JWT
 * - Dashboard administrativo  
 * - Gest√£o de eventos e usu√°rios
 * - Galeria de fotos
 * - Sistema de pagamentos
 * 
 * @author Antonio Maria
 * @version 1.0.0
 * ========================================
 */

// ===== IMPORTS E DEPEND√äNCIAS =====
const express = require('express');
const cors = require('cors');
const helmet = require('helmet');
const compression = require('compression');
const rateLimit = require('express-rate-limit');
require('dotenv').config();

// Configura√ß√£o do banco de dados
const { sequelize } = require('./config/database');
const { setupAssociations } = require('./models');

// ===== CONFIGURA√á√ÉO DO SERVIDOR =====
const app = express();
const PORT = process.env.PORT || 5000;

// ===== MIDDLEWARES DE SEGURAN√áA =====
// Prote√ß√£o b√°sica de cabe√ßalhos HTTP
app.use(helmet({
  crossOriginEmbedderPolicy: false,
  contentSecurityPolicy: false // Desabilitado para desenvolvimento
}));

// Compress√£o de responses para melhor performance
app.use(compression());

// ===== RATE LIMITING =====
// Prote√ß√£o contra ataques de for√ßa bruta
const limiter = rateLimit({
  windowMs: 15 * 60 * 1000, // 15 minutos
  max: 100, // m√°ximo 100 requests por IP
  message: {
    error: 'Muitas tentativas. Tente novamente em 15 minutos.'
  },
  standardHeaders: true,
  legacyHeaders: false
});
app.use('/api/', limiter);

// ===== CONFIGURA√á√ÉO CORS =====
// Permitir requisi√ß√µes do frontend
app.use(cors({
  origin: [
    'http://localhost:3000',
    'http://127.0.0.1:3000',
    process.env.FRONTEND_URL
  ].filter(Boolean),
  credentials: true,
  methods: ['GET', 'POST', 'PUT', 'DELETE', 'PATCH', 'OPTIONS'],
  allowedHeaders: ['Content-Type', 'Authorization', 'X-Requested-With']
}));

// ===== PARSERS DE DADOS =====
// Parser para JSON (limite de 10MB para uploads)
app.use(express.json({ limit: '10mb' }));
app.use(express.urlencoded({ extended: true, limit: '10mb' }));

// ===== ARQUIVOS EST√ÅTICOS =====
// Servir uploads de imagens e documentos
app.use('/uploads', express.static('uploads'));

// ===== ROTAS P√öBLICAS =====
// Autentica√ß√£o (login, registro, recupera√ß√£o de senha)
app.use('/api/auth', require('./routes/auth'));

// Usu√°rios (perfil, atualiza√ß√£o de dados)
app.use('/api/users', require('./routes/users'));

// Eventos (listagem p√∫blica, inscri√ß√µes)
app.use('/api/events', require('./routes/events'));

// Produtos (cat√°logo p√∫blico)
app.use('/api/products', require('./routes/products'));

// Galeria (visualiza√ß√£o p√∫blica de fotos)
app.use('/api/gallery', require('./routes/gallery'));

// Contatos (formul√°rio de contato)
app.use('/api/contacts', require('./routes/contacts'));

// Dashboard (estat√≠sticas p√∫blicas)
app.use('/api/dashboard', require('./routes/dashboard'));

// ===== ROTAS ADMINISTRATIVAS (PROTEGIDAS) =====
// Dashboard administrativo completo
app.use('/api/admin/dashboard', require('./routes/admin-dashboard'));

// Gest√£o de usu√°rios (CRUD, relat√≥rios)
app.use('/api/admin/users', require('./routes/admin-users'));

// Gest√£o de eventos (cria√ß√£o, edi√ß√£o, participantes)
app.use('/api/admin/events', require('./routes/admin-events'));

// Gest√£o de produtos (estoque, pre√ßos, categorias)
app.use('/api/admin/products', require('./routes/admin-products'));

// Gest√£o de galeria (upload, modera√ß√£o, organiza√ß√£o)
app.use('/api/admin/gallery', require('./routes/admin-gallery'));

// Gest√£o de contatos (atendimento, follow-up)
app.use('/api/admin/contacts', require('./routes/admin-contacts'));

// Rota de teste
app.get('/', (req, res) => {
  res.json({ message: 'API Capoeira Pro funcionando!' });
});

// Middleware de erro global
app.use((err, req, res, next) => {
  console.error(err.stack);
  res.status(500).json({ 
    message: 'Algo deu errado!',
    error: process.env.NODE_ENV === 'development' ? err.message : {}
  });
});

// Middleware para rotas n√£o encontradas
app.use('*', (req, res) => {
  res.status(404).json({ message: 'Rota n√£o encontrada' });
});

// ===== INICIALIZA√á√ÉO DO SERVIDOR =====
const startServer = async () => {
  try {
    console.log('üöÄ Iniciando Servidor Capoeira Pro...');
    console.log('='.repeat(50));
    
    // 1. Configurar associa√ß√µes dos modelos
    console.log('üîÑ Configurando modelos do banco de dados...');
    setupAssociations();
    console.log('‚úÖ Associa√ß√µes dos modelos configuradas');
    
    // 2. Testar conex√£o com banco de dados
    console.log('üîÑ Testando conex√£o com banco de dados...');
    await sequelize.authenticate();
    console.log('‚úÖ Conex√£o com banco de dados estabelecida');
    
    // 3. Sincronizar modelos (criar/atualizar tabelas)
    console.log('üîÑ Verificando modelos do banco de dados...');
    // DESABILITADO para evitar loops infinitos de ALTER TABLE
    // await sequelize.sync({ alter: true }); // Criar/atualizar tabelas
    console.log('‚úÖ Tabelas do banco j√° existem (sync desabilitado)');

    // 4. Garantir que existe um admin padr√£o
    console.log('üîß Verificando usu√°rio administrador...');
    const { createDefaultAdmin } = require('./scripts/create-default-admin');
    await createDefaultAdmin();
    
    // 5. Iniciar servidor HTTP
    const server = app.listen(PORT, () => {
      console.log('='.repeat(50));
      console.log('‚úÖ SERVIDOR CAPOEIRA PRO ONLINE!');
      console.log('='.repeat(50));
      console.log(`üåê URL Principal: http://localhost:${PORT}`);
      console.log(`üîë API Endpoint: http://localhost:${PORT}/api`);
      console.log(`üöë Health Check: http://localhost:${PORT}/health`);
      console.log(`üõ°Ô∏è  Ambiente: ${process.env.NODE_ENV || 'development'}`);
      console.log(`üï∞Ô∏è  Iniciado em: ${new Date().toLocaleString('pt-BR')}`);
      console.log('='.repeat(50));
    });

    // Graceful shutdown
    process.on('SIGTERM', () => {
      console.log('üìã Recebido SIGTERM, desligando servidor...');
      server.close(() => {
        console.log('‚úÖ Servidor desligado com sucesso');
        process.exit(0);
      });
    });

  } catch (error) {
    console.error('='.repeat(50));
    console.error('‚ùå ERRO FATAL AO INICIALIZAR SERVIDOR');
    console.error('='.repeat(50));
    console.error('Erro:', error.message);
    console.error('Stack:', error.stack);
    console.error('='.repeat(50));
    process.exit(1);
  }
};

// Iniciar o servidor
startServer();

/**
 * ========================================
 * FIM DO SERVIDOR PRINCIPAL
 * ========================================
 */